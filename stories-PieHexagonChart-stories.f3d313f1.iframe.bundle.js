"use strict";(self.webpackChunkhexagon_chart=self.webpackChunkhexagon_chart||[]).push([[11],{"./src/stories/PieHexagonChart.stories.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{__namedExportsOrder:()=>__namedExportsOrder,default:()=>PieHexagonChart_stories,defaultData:()=>defaultData});var react=__webpack_require__("./node_modules/react/index.js");const DEGREE_TO_RADIAN=Math.PI/180,RADIAN_TO_DEGREE=180/Math.PI,ROOT3=Math.sqrt(3);var lib=__webpack_require__("./node_modules/react-hexgrid/lib/index.js");const polarToCartesian=(cx,cy,radius,angle)=>{const radians=(angle-90)*DEGREE_TO_RADIAN;return{x:cx+radius*Math.cos(radians),y:cy+radius*Math.sin(radians)}},getHexNeighbors=hex=>[{q:1,r:-1,s:0},{q:1,r:0,s:-1},{q:0,r:1,s:-1},{q:-1,r:1,s:0},{q:-1,r:0,s:1},{q:0,r:-1,s:1}].map((direction=>({q:hex.q+direction.q,r:hex.r+direction.r,s:hex.s+direction.s}))),calculateHexCorners=(hex,hexSize,spacing)=>{const center=((hex,hexSize,spacing)=>({x:hexSize*(ROOT3*hex.q+ROOT3/2*hex.r)*spacing,y:hexSize*(1.5*hex.r)*spacing}))(hex,hexSize,spacing),corners=[];for(let i=0;i<6;i++){const angle=DEGREE_TO_RADIAN*(60*i-30),x=center.x+hexSize*Math.cos(angle),y=center.y+hexSize*Math.sin(angle);corners.push({x,y})}return corners},isHexagonInsidePieSlice=(hex,cx,cy,startAngle,endAngle,innerRadius,outerRadius,hexSize,spacing,sideAngleGap,radiusGap)=>calculateHexCorners(hex,hexSize,spacing).every((corner=>((x,y,cx,cy,startAngle,endAngle,innerRadius,outerRadius)=>{const angle=Math.atan2(y-cy,x-cx)*RADIAN_TO_DEGREE+90,distance=Math.sqrt((x-cx)**2+(y-cy)**2);return angle>=startAngle&&angle<=endAngle&&distance>=innerRadius&&distance<=outerRadius})(corner.x+cx,corner.y+cy,cx,cy,startAngle+sideAngleGap,endAngle-sideAngleGap,innerRadius+radiusGap,outerRadius-radiusGap))),PieSlice=({cx,cy,radius,startAngle,endAngle,thickness,style})=>{const startOuter=polarToCartesian(cx,cy,radius,startAngle),endOuter=polarToCartesian(cx,cy,radius,endAngle),startInner=polarToCartesian(cx,cy,radius-thickness,startAngle),endInner=polarToCartesian(cx,cy,radius-thickness,endAngle),largeArcFlag=endAngle-startAngle<=180?"0":"1",pathData=`\n    M ${startInner.x} ${startInner.y}\n    A ${radius-thickness} ${radius-thickness} 0 ${largeArcFlag} 1 ${endInner.x} ${endInner.y}\n    L ${endOuter.x} ${endOuter.y}\n    A ${radius} ${radius} 0 ${largeArcFlag} 0 ${startOuter.x} ${startOuter.y}\n    Z\n  `;return react.createElement("path",{d:pathData,style})},pie_hexagon_PieSlice=PieSlice;PieSlice.__docgenInfo={description:"",methods:[],displayName:"PieSlice",props:{cx:{required:!0,tsType:{name:"number"},description:""},cy:{required:!0,tsType:{name:"number"},description:""},radius:{required:!0,tsType:{name:"number"},description:""},startAngle:{required:!0,tsType:{name:"number"},description:""},endAngle:{required:!0,tsType:{name:"number"},description:""},thickness:{required:!0,tsType:{name:"number"},description:""},style:{required:!0,tsType:{name:"ReactCSSProperties",raw:"React.CSSProperties"},description:""}}};const PieHexagonGrid=({cx,cy,radius,startAngle,endAngle,thickness,hexSize,spacing,pieSliceStyle,hexagonStyle,sideAngleGap=1,radiusGap=8,data})=>{const generateHexagonsInPieSlice=(0,react.useCallback)(((centerHex,maxCount)=>{const hexagons=[],queue=[centerHex],visited=new Set;for(;queue.length>0&&hexagons.length<maxCount;){const hex=queue.shift();if(!hex)continue;const hexKey=`${Math.round(hex.q)},${Math.round(hex.r)},${Math.round(hex.s)}`;if(!visited.has(hexKey)&&(visited.add(hexKey),isHexagonInsidePieSlice(hex,cx,cy,startAngle,endAngle,radius-thickness,radius,hexSize,spacing,sideAngleGap,radiusGap))){hexagons.push(hex);const neighbors=getHexNeighbors(hex);for(const neighbor of neighbors)visited.has(`${Math.round(neighbor.q)},${Math.round(neighbor.r)},${Math.round(neighbor.s)}`)||queue.push(neighbor)}}return hexagons}),[cx,cy,endAngle,hexSize,radius,spacing,startAngle,thickness]),pieSliceCenter=(0,react.useMemo)((()=>((cx,cy,radius,thickness,startAngle,endAngle)=>polarToCartesian(cx,cy,radius-thickness/2,(startAngle+endAngle)/2))(cx,cy,radius,thickness,startAngle,endAngle)),[cx,cy,radius,thickness,startAngle,endAngle]),centerHex=(0,react.useMemo)((()=>((x,y,hexSize,spacing)=>{const _y=y/spacing,q=(ROOT3/3*(x/spacing)-1/3*_y)/hexSize,r=2/3*_y/hexSize;return new lib._h(q,r,-q-r)})(pieSliceCenter.x-cx,pieSliceCenter.y-cy,hexSize,spacing)),[pieSliceCenter,cx,cy,hexSize,spacing]),hexagonsInPieSlice=(0,react.useMemo)((()=>generateHexagonsInPieSlice(centerHex,data?.length??1)),[centerHex,data,generateHexagonsInPieSlice]);return react.createElement("g",null,react.createElement(lib.PE,{size:{x:hexSize,y:hexSize},origin:{x:cx,y:cy},spacing,flat:!1},hexagonsInPieSlice.map(((hex,index)=>react.createElement(lib.VJ,{style:hexagonStyle,key:index,q:hex.q,r:hex.r,s:hex.s})))),react.createElement(pie_hexagon_PieSlice,{style:pieSliceStyle,cx,cy,radius,startAngle,endAngle,thickness}))},pie_hexagon_PieHexagonGrid=PieHexagonGrid;PieHexagonGrid.__docgenInfo={description:"",methods:[],displayName:"PieHexagonGrid",props:{cx:{required:!0,tsType:{name:"number"},description:""},cy:{required:!0,tsType:{name:"number"},description:""},radius:{required:!0,tsType:{name:"number"},description:""},startAngle:{required:!0,tsType:{name:"number"},description:""},endAngle:{required:!0,tsType:{name:"number"},description:""},thickness:{required:!0,tsType:{name:"number"},description:""},hexSize:{required:!0,tsType:{name:"number"},description:""},spacing:{required:!0,tsType:{name:"number"},description:""},pieSliceStyle:{required:!0,tsType:{name:"ReactCSSProperties",raw:"React.CSSProperties"},description:""},hexagonStyle:{required:!0,tsType:{name:"ReactCSSProperties",raw:"React.CSSProperties"},description:""},sideAngleGap:{required:!1,tsType:{name:"number"},description:"",defaultValue:{value:"1",computed:!1}},radiusGap:{required:!1,tsType:{name:"number"},description:"",defaultValue:{value:"8",computed:!1}},data:{required:!0,tsType:{name:"Array",elements:[{name:"any"}],raw:"any[]"},description:""}}};const getDummyData=length=>new Array(length).fill(0),PieHexagonChart=()=>react.createElement("svg",{width:"100%",height:"750px",viewBox:"0 0 500 500"},react.createElement(pie_hexagon_PieHexagonGrid,{cx:250,cy:500,radius:455,startAngle:-90,endAngle:90,thickness:20,hexSize:10,spacing:1.12,pieSliceStyle:{fill:"#F7F8F8",strokeWidth:1,stroke:"#E9EBEC"},hexagonStyle:{fill:"red"},data:getDummyData(0)}),react.createElement(pie_hexagon_PieHexagonGrid,{cx:250,cy:500,radius:430,startAngle:-90,endAngle:90,thickness:60,hexSize:10,spacing:1.12,pieSliceStyle:{fill:"none",strokeWidth:3,stroke:"#E5EDFF",strokeDasharray:"4"},hexagonStyle:{fill:"#C2D4FF",stroke:"#004CFF"},data:getDummyData(120)}),react.createElement(pie_hexagon_PieHexagonGrid,{cx:250,cy:500,radius:370,startAngle:-90,endAngle:90,thickness:80,hexSize:10,spacing:1.12,pieSliceStyle:{fill:"none",strokeWidth:3,stroke:"#E8F8EC",strokeDasharray:"4"},hexagonStyle:{fill:"#CDEFD6",stroke:"#25BB4D"},data:getDummyData(40)}),react.createElement(pie_hexagon_PieHexagonGrid,{cx:250,cy:500,radius:290,startAngle:-90,endAngle:90,thickness:80,hexSize:10,spacing:1.12,pieSliceStyle:{fill:"none",strokeWidth:3,stroke:"#EDF0F8",strokeDasharray:"4"},hexagonStyle:{fill:"#EDF0F8",stroke:"#3955B1",strokeDasharray:"2 1"},data:getDummyData(100)}),react.createElement(pie_hexagon_PieHexagonGrid,{cx:250,cy:500,radius:210,startAngle:-90,endAngle:90,thickness:80,hexSize:10,spacing:1.12,pieSliceStyle:{fill:"none",strokeWidth:3,stroke:"#FEF8E7",strokeDasharray:"4"},hexagonStyle:{fill:"#FDEFC4",stroke:"#F5B800"},data:getDummyData(20)}),react.createElement(pie_hexagon_PieHexagonGrid,{cx:250,cy:500,radius:130,startAngle:-90,endAngle:90,thickness:40,hexSize:8,spacing:1.12,pieSliceStyle:{fill:"none",strokeWidth:3,stroke:"#FDE7E8",strokeDasharray:"4"},hexagonStyle:{fill:"#FBC6C8",stroke:"#ED121D"},data:getDummyData(30)}),react.createElement("line",{x1:-220,y1:500,x2:720,y2:500,strokeWidth:3,stroke:"#EBEDED"})),pie_hexagon_PieHexagonChart=PieHexagonChart;PieHexagonChart.__docgenInfo={description:"",methods:[],displayName:"PieHexagonChart"};const PieHexagonChart_stories={title:"Example/PieHexagonChart",component:pie_hexagon_PieHexagonChart,parameters:{layout:"fill"},tags:["autodocs"]},defaultData={},__namedExportsOrder=["defaultData"];defaultData.parameters={...defaultData.parameters,docs:{...defaultData.parameters?.docs,source:{originalSource:"{}",...defaultData.parameters?.docs?.source}}}}}]);